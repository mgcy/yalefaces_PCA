from sklearn.decomposition import PCA
from sklearn.preprocessing import normalize
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
from math import log10
import glob


def cal_snr(image_a, image_b):
    # calculate mean square error between two images
    var_a = np.var(image_a.astype(float))
    var_b = np.var(image_b.astype(float) - image_a.astype(float))
    snr = 10 * log10(var_a / var_b)
    return snr


def cal_mse(image_a, image_b):
    # calculate mean square error between two images
    mse = np.sum((image_a.astype(float) - image_b.astype(float)) ** 2)
    mse /= float(image_a.shape[0])
    return mse


'''
########################################################################################
# train PCA using 15 images
# get data
# images are 320 * 243
num_train = 15
pose = 'sad'

# initialize
im_data = np.zeros((1, 320 * 243))
for i in range(1, num_train + 1):
    if i <= 9:
        tmp_im_name = 'D:\\Users\\YangYifan\\PycharmProjects\\yalefaces_PCA\\yalefaces\\subject0' + str(
            i) + pose + '.gif'
    else:
        tmp_im_name = 'D:\\Users\\YangYifan\\PycharmProjects\\yalefaces_PCA\\yalefaces\\subject' + str(
            i) + pose + '.gif'

    # print(tmp_im_name)
    tmp_im = Image.open(tmp_im_name)
    tmp_im_data = np.array(tmp_im).reshape((1, 320 * 243))
    im_data = np.concatenate((im_data, tmp_im_data), axis=0)

im_data = np.delete(im_data, 0, 0)

# normailze
# im_data = normalize(im_data)

# PCA
pca = PCA(0.97)
lower_dimension_data = pca.fit_transform(im_data)
print(lower_dimension_data.shape)

# reconstruction
approximation = pca.inverse_transform(lower_dimension_data)
print(approximation.shape)

approximation = approximation.reshape(-1, 243, 320)
X_norm = im_data.reshape(-1, 243, 320)

# calculate avg snr and avg mse
total_snr = 0
for i in range(0, X_norm.shape[0]):
    total_snr = total_snr + cal_snr(X_norm[i,], approximation[i,])
avg_snr = total_snr / num_train
print('SNR: ' + str(avg_snr))

plt.figure()
fig4, axarr = plt.subplots(3, 2, figsize=(8, 8))
axarr[0, 0].imshow(X_norm[0,], cmap='gray')
axarr[0, 0].set_title('Original Image')
axarr[0, 0].axis('off')
axarr[0, 1].imshow(approximation[0,], cmap='gray')
axarr[0, 1].set_title('99% Variation')
axarr[0, 1].axis('off')
axarr[1, 0].imshow(X_norm[1,], cmap='gray')
axarr[1, 0].set_title('Original Image')
axarr[1, 0].axis('off')
axarr[1, 1].imshow(approximation[1,], cmap='gray')
axarr[1, 1].set_title('99% Variation')
axarr[1, 1].axis('off')
axarr[2, 0].imshow(X_norm[2,], cmap='gray')
axarr[2, 0].set_title('Original Image')
axarr[2, 0].axis('off')
axarr[2, 1].imshow(approximation[2,], cmap='gray')
axarr[2, 1].set_title('99% variation')
axarr[2, 1].axis('off')
# plt.show()

############################################################################################
# show some test
num_test = 1
pose2 = 'surprised'

# initialize

im_test = np.zeros((1, 320 * 243))

for i in range(1, num_test + 1):
    if i <= 9:
        tmp_im_name = 'D:\\Users\\YangYifan\\PycharmProjects\\yalefaces_PCA\\yalefaces\\subject0' + str(
            i) + pose2 + '.gif'
    else:
        tmp_im_name = 'D:\\Users\\YangYifan\\PycharmProjects\\yalefaces_PCA\\yalefaces\\subject' + str(
            i) + pose2 + '.gif'

    print(tmp_im_name)
    tmp_im = Image.open(tmp_im_name)
    tmp_im_data = np.array(tmp_im).reshape((1, 320 * 243))
    im_test = np.concatenate((im_test, tmp_im_data), axis=0)
print(im_test.shape)
im_test = np.delete(im_test, 0, 0)
plt.figure()
plt.imshow(im_test[0,].reshape(243, 320))

# PCA
output1 = pca.transform(im_test)
print('???')
print(output1.shape)

# reconstruction
output2 = pca.inverse_transform(output1)
print(output2.shape)

output2 = output2.reshape(243, 320)
im_test = im_test.reshape(243, 320)

# # calculate avg snr and avg mse
# total_snr = 0
# for i in range(0, X_norm.shape[0]):
#     total_snr = total_snr + cal_snr(X_norm[i,], approximation[i,])
# avg_snr = total_snr / num_train
# print('SNR: ' + str(avg_snr))

plt.figure()
plt.imshow(im_test)
plt.figure()
plt.imshow(output2)

fig5, axarr = plt.subplots(3, 2, figsize=(8, 8))
axarr[0, 0].imshow(im_test[0,], cmap='gray')
axarr[0, 0].set_title('Original Test Image')
axarr[0, 0].axis('off')
axarr[0, 1].imshow(output2[0,], cmap='gray')
axarr[0, 1].set_title('99% Variation')
axarr[0, 1].axis('off')
axarr[1, 0].imshow(im_test[1,], cmap='gray')
axarr[1, 0].set_title('Original Image')
axarr[1, 0].axis('off')
axarr[1, 1].imshow(output2[1,], cmap='gray')
axarr[1, 1].set_title('99% Variation')
axarr[1, 1].axis('off')
axarr[2, 0].imshow(im_test[2,], cmap='gray')
axarr[2, 0].set_title('Original Image')
axarr[2, 0].axis('off')
axarr[2, 1].imshow(output2[2,], cmap='gray')
axarr[2, 1].set_title('99% variation')
axarr[2, 1].axis('off')


plt.show()
'''
###################################################################################
# train PCA using all data

# load more data
file_name = 'D:\\Users\\YangYifan\\PycharmProjects\\yalefaces_PCA\\yalefaces\\*.gif'
file = glob.glob(file_name)
all_data = np.zeros((1, 243 * 320))
for i in range(len(file)):
    tmp_im = Image.open(file[i])
    tmp_im_data = np.array(tmp_im).reshape((1, 320 * 243))
    all_data = np.concatenate((all_data, tmp_im_data), axis=0)

all_data = np.delete(all_data, 0, 0)

# shuffle the data and split it into train and test data
np.random.shuffle(all_data)
num_train = int(len(all_data) / 3 * 2)
train_data = all_data[:num_train, ]
test_data = all_data[num_train:, ]

# fit pca model
pca = PCA(0.95)
train_pca_data = pca.fit_transform(train_data)
print(train_pca_data.shape)

# reconstruction
train_reconstruction = pca.inverse_transform(train_pca_data)
print(train_reconstruction.shape)

train_reconstruction = train_reconstruction.reshape(-1, 243, 320)
train_data = train_data.reshape(-1, 243, 320)

# test pca
test_pca_data = pca.transform(test_data)
print(test_pca_data.shape)
# reconstruction
test_reconstruction = pca.inverse_transform(test_pca_data)
print(test_reconstruction.shape)

test_reconstruction = test_reconstruction.reshape(-1, 243, 320)
test_data = test_data.reshape(-1, 243, 320)

# calculate avg snr and avg mse
train_snr = 0
test_snr = 0
for i in range(0, num_train):
    train_snr = train_snr + cal_snr(train_data[i,], train_reconstruction[i,])
train_snr = train_snr/ num_train
print('Train SNR: ' + str(train_snr))

for i in range(0, len(all_data)-num_train):
    test_snr = test_snr + cal_snr(test_data[i,], test_reconstruction[i,])
test_snr = test_snr/ (len(all_data)-num_train)
print('Test SNR: ' + str(test_snr))

fig1, axarr = plt.subplots(3, 2, figsize=(8, 8))
axarr[0, 0].imshow(train_data[0,], cmap='gray')
axarr[0, 0].set_title('Original Train Image')
axarr[0, 0].axis('off')
axarr[0, 1].imshow(train_reconstruction[0,], cmap='gray')
axarr[0, 1].set_title('99% Variation')
axarr[0, 1].axis('off')
axarr[1, 0].imshow(train_data[1,], cmap='gray')
axarr[1, 0].set_title('Original Image')
axarr[1, 0].axis('off')
axarr[1, 1].imshow(train_reconstruction[1,], cmap='gray')
axarr[1, 1].set_title('99% Variation')
axarr[1, 1].axis('off')
axarr[2, 0].imshow(train_data[2,], cmap='gray')
axarr[2, 0].set_title('Original Image')
axarr[2, 0].axis('off')
axarr[2, 1].imshow(train_reconstruction[2,], cmap='gray')
axarr[2, 1].set_title('99% variation')
axarr[2, 1].axis('off')

fig2, axarr = plt.subplots(3, 2, figsize=(8, 8))
axarr[0, 0].imshow(test_data[0,], cmap='gray')
axarr[0, 0].set_title('Original Test Image')
axarr[0, 0].axis('off')
axarr[0, 1].imshow(test_reconstruction[0,], cmap='gray')
axarr[0, 1].set_title('99% Variation')
axarr[0, 1].axis('off')
axarr[1, 0].imshow(test_data[1,], cmap='gray')
axarr[1, 0].set_title('Original Image')
axarr[1, 0].axis('off')
axarr[1, 1].imshow(test_reconstruction[1,], cmap='gray')
axarr[1, 1].set_title('99% Variation')
axarr[1, 1].axis('off')
axarr[2, 0].imshow(test_data[2,], cmap='gray')
axarr[2, 0].set_title('Original Image')
axarr[2, 0].axis('off')
axarr[2, 1].imshow(test_reconstruction[2,], cmap='gray')
axarr[2, 1].set_title('99% variation')
axarr[2, 1].axis('off')

plt.show()